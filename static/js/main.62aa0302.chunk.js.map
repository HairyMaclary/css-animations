{"version":3,"sources":["animation.tsx","code-display.tsx","examples.ts","container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Animation","props","code","css","html","className","index","animation","ReactHtmlParser","buttons","isOnDisplay","onClick","resetClickHandler","showClickHander","Style","it","CodeDisplay","updateCSS","event","preventDefault","updateCode","setState","cssDisplay","target","value","state","nextProps","this","rows","split","length","name","onChange","React","Component","examples","description","importantProperties","deepCopy","obj","JSON","parse","stringify","Container","updateStyle","animations","displayedAnimationIndex","changeCurrentAnimation","resetCSS","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62aa0302.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport Style from 'style-it';\r\nimport { ICode } from './container';\r\nimport './animation.css';\r\n\r\nexport interface IAnimationProps {\r\n  code: ICode, \r\n  index: number, \r\n  isOnDisplay: boolean\r\n  showClickHander: () => any, \r\n  resetClickHandler: () => any,\r\n}\r\n\r\nexport function Animation(props: IAnimationProps) {\r\n\r\n  const { css, html } = props.code;\r\n  const className = `animation animation-${props.index}`;\r\n  const animation = <div className={className}>{ReactHtmlParser(html)}</div>;\r\n  const buttons = props.isOnDisplay ? \r\n    <div className={'button reset-button'} onClick={props.resetClickHandler}>reset</div> : \r\n    <div className={'button show-button'} onClick={props.showClickHander}>show</div>\r\n\r\n  return (\r\n    <div>\r\n      <div className='animation-container'>\r\n        {buttons}\r\n        {(Style as any).it(css, animation)}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { ICode } from './container';\r\nimport './code-display.css'\r\n\r\nexport interface ICodeDisplayProps {\r\n    code: ICode, updateCode: any\r\n}\r\n\r\nexport interface ICodeDisplayState {\r\n    cssDisplay: string\r\n}\r\n\r\n// export function CodeDisplay(props: {code: ICode, updateCode: any}) {\r\n    export class CodeDisplay extends React.Component<ICodeDisplayProps, ICodeDisplayState> {\r\n\r\n    constructor(props: ICodeDisplayProps) {\r\n        super(props);\r\n        this.state={cssDisplay: props.code.css}\r\n    }\r\n\r\n    // This is here as a workaround to the value attribute in textarea not updating.\r\n    // But, we need to be careful that we don't miss out on updates\r\n    shouldComponentUpdate(nextProps: ICodeDisplayProps) {\r\n        if(nextProps.code.css !== this.state.cssDisplay || this.props.code.css !== nextProps.code.css ) {\r\n            this.setState({cssDisplay: nextProps.code.css})\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    updateCSS = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        event.preventDefault();\r\n        this.props.updateCode(event);\r\n        this.setState({cssDisplay: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        const textRowCount = this.state.cssDisplay.split(':').length;\r\n        const rows = textRowCount + 1;\r\n        return (\r\n            <div className=\"codeBlock\">\r\n                <pre>\r\n                    <code> { this.props.code.html }</code>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <textarea name={'display'} rows={rows} value={this.state.cssDisplay} onChange={this.updateCSS}/>\r\n                </pre>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { IAnimationData } from \"./container\";\r\n\r\nexport const examples: IAnimationData[] = [\r\n    {\r\n        description: 'test 1',\r\n        html: '<a href=\"#\"><span></span>hover me</a>',\r\n        importantProperties: ['opacity', 'transform'],\r\n        css: `\r\n    a {\r\n      width: 220px;\r\n      height: 80px;\r\n      color: #ff0;\r\n      background-color: transparent;\r\n      font-size: 26px;\r\n      text-decoration: none;\r\n      text-transform: uppercase;\r\n      text-align: center;\r\n      line-height: 80px;\r\n      transition: all 0.5s;\r\n      position: relative;\r\n    }\r\n    \r\n    a:before,\r\n    a:after {\r\n      content: \"\";\r\n      position: absolute;\r\n      top: 50%;\r\n      width: 20px;\r\n      height: 20px;\r\n      background-color: #ff0;\r\n      border-radius: 50%;\r\n      transform: translateY(-50%);\r\n      transition: all 0.3s;\r\n      z-index: -1;\r\n      opacity: 0;\r\n    }\r\n    \r\n    a:before {\r\n      left: 0;\r\n      box-shadow: -100px 0 0 #ff0;\r\n    }\r\n    \r\n    a:after {\r\n      right: 0;\r\n      box-shadow: 100px 0 0 #ff0;\r\n    }\r\n    \r\n    a:hover:before {\r\n      left: 50%;\r\n      box-shadow: 30px 0 0 #ff0;\r\n      transform: translateX(-50%) translateY(-50%);\r\n      opacity: 1;\r\n    }\r\n    \r\n    a:hover:after {\r\n      right: 50%;\r\n      box-shadow: -30px 0 0 #ff0;\r\n      transform: translateX(50%) translateY(-50%);\r\n      opacity: 1;\r\n    }\r\n    \r\n    span {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      background-color: #ff0;\r\n      border-radius: 8px;\r\n      transform: scale(0);\r\n      transition: all 0.3s;\r\n      z-index: -1;\r\n    }\r\n    \r\n    a:hover span {\r\n      transform: scale(1);\r\n      transition-delay: 0.4s;\r\n    }\r\n    \r\n    a:hover {\r\n      color: #262626;\r\n      transition-delay: 0.4s;\r\n    }\r\n    `\r\n    },\r\n    {\r\n        description: 'test 2',\r\n        html: '<a href=\"#\"><span></span>hover me aswell</a>',\r\n        importantProperties: ['text-decoration', 'border-radius'],\r\n        css: `a {\r\n    width: 220px;\r\n    height: 80px;\r\n    color: green;\r\n    background-color: transparent;\r\n    font-size: 26px;\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    line-height: 80px;\r\n    transition: all 0.5s;\r\n    position: relative;\r\n  }\r\n  \r\n  a:before,\r\n  a:after {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 50%;\r\n    width: 20px;\r\n    height: 20px;\r\n    background-color: #ff0;\r\n    border-radius: 50%;\r\n    transform: translateY(-50%);\r\n    transition: all 0.3s;\r\n    z-index: -1;\r\n    opacity: 0;\r\n  }\r\n  \r\n  a:before {\r\n    left: 0;\r\n    box-shadow: -100px 0 0 #ff0;\r\n  }\r\n  \r\n  a:after {\r\n    right: 0;\r\n    box-shadow: 100px 0 0 #ff0;\r\n  }\r\n  \r\n  a:hover:before {\r\n    left: 50%;\r\n    box-shadow: 30px 0 0 #ff0;\r\n    transform: translateX(-50%) translateY(-50%);\r\n    opacity: 1;\r\n  }\r\n  \r\n  a:hover:after {\r\n    right: 50%;\r\n    box-shadow: -30px 0 0 #ff0;\r\n    transform: translateX(50%) translateY(-50%);\r\n    opacity: 1;\r\n  }\r\n  \r\n  span {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #ff0;\r\n    border-radius: 8px;\r\n    transform: scale(0);\r\n    transition: all 0.3s;\r\n    z-index: -1;\r\n  }\r\n  \r\n  a:hover span {\r\n    transform: scale(1);\r\n    transition-delay: 0.4s;\r\n  }\r\n  \r\n  a:hover {\r\n    color: #262626;\r\n    transition-delay: 0.4s;\r\n  }\r\n  `\r\n    }\r\n\r\n]","import React from 'react';\r\nimport { Animation } from './animation';\r\nimport { CodeDisplay } from './code-display';\r\nimport { examples } from './examples';\r\nimport './container.css';\r\n\r\nexport interface ICode { css: string, html: string };\r\nexport interface IAnimationData {\r\n  description: string;\r\n  html: string;\r\n  importantProperties: string[];\r\n  css: string;\r\n}\r\n\r\ninterface IContainerState {\r\n  animations: IAnimationData[], \r\n  displayedAnimationIndex: number\r\n}\r\n\r\nfunction deepCopy(obj: {}) {\r\n  return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nexport class Container extends React.Component<{}, IContainerState> {\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = { \r\n      animations: deepCopy(examples), \r\n      displayedAnimationIndex: 0\r\n    }\r\n  }\r\n\r\n  updateStyle = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const animations = deepCopy(this.state.animations);\r\n    animations[this.state.displayedAnimationIndex].css = event.target.value;\r\n    this.setState({ animations })\r\n  }\r\n\r\n  changeCurrentAnimation = (index: number) => {\r\n    this.setState({displayedAnimationIndex: index})\r\n  }\r\n\r\n  // reset from source data\r\n  resetCSS = (index: number) => {\r\n    const animations = deepCopy(this.state.animations);\r\n    animations[this.state.displayedAnimationIndex].css = deepCopy(examples[index].css); \r\n    this.setState({animations})\r\n  }\r\n\r\n  animations() {\r\n    return this.state.animations.map((animation, index) => {\r\n      const html = animation.html;\r\n      const css = animation.css;\r\n      return <Animation\r\n        key={index}\r\n        index={index}\r\n        code={{ css, html }}\r\n        showClickHander={() => this.changeCurrentAnimation(index)}\r\n        resetClickHandler={() => this.resetCSS(index)}\r\n        isOnDisplay={this.state.displayedAnimationIndex === index}\r\n      ></Animation>\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const { html, css } = this.state.animations[this.state.displayedAnimationIndex];\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"animations-container\" >\r\n          {this.animations()}\r\n        </div>\r\n        <CodeDisplay code={{ css, html }} updateCode={this.updateStyle}></CodeDisplay>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport { Container } from './container';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <div className=\"header-img\"></div>\n      </header>\n      <Container></Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}